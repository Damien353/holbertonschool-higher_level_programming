>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

>>> bg.integer_validator("width", 5)

>>> bg.integer_validator("width", -5)
Traceback (most recent call last):
    ...
ValueError: width must be greater than 0

>>> bg.integer_validator("width", "str")
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("width", 0)
Traceback (most recent call last):
    ...
ValueError: width must be greater than 0

>>> bg.integer_validator("height", 10)

>>> bg.integer_validator("width", 1000000)

>>> bg.integer_validator("side_length", 3)

>>> bg.integer_validator("width", 5.5)
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("", 10)
Traceback (most recent call last):
    ...
TypeError:  must be an integer

>>> bg.integer_validator("width", -0.0000001)
Traceback (most recent call last):
    ...
ValueError: width must be greater than 0

>>> bg.integer_validator("width", 999999999999999)

>>> bg.integer_validator("width", "abc")
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("width", -1)
Traceback (most recent call last):
    ...
ValueError: width must be greater than 0

>>> bg.integer_validator(123, 10)
Traceback (most recent call last):
    ...
TypeError: 123 must be an integer

>>> bg.integer_validator(["width"], 10)
Traceback (most recent call last):
    ...
TypeError: ['width'] must be an integer

>>> bg.integer_validator("width-width", 10)

>>> bg.integer_validator("width width", 10)

>>> bg.integer_validator("w" * 1000, 10)

>>> bg.integer_validator("width", 5.0)
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("width", None)
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("width", {"key": "value"})
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("width", True)
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("width", -1000000000000)
Traceback (most recent call last):
    ...
ValueError: width must be greater than 0

>>> bg.integer_validator("width", 1000000000000)

>>> bg.integer_validator("width   width", 10)

>>> bg.integer_validator("width_@#_name", 10)

>>> bg.integer_validator("width", 9223372036854775807)

>>> bg.integer_validator("width", -9223372036854775807)
Traceback (most recent call last):
    ...
ValueError: width must be greater than 0

>>> bg.integer_validator("width", 99999999999.99)
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("width", True)
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("width", [1, 2, 3])
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("width", {"key": "value"})
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("width", {1, 2, 3})
Traceback (most recent call last):
    ...
TypeError: width must be an integer

>>> bg.integer_validator("width", 0.0000001)
Traceback (most recent call last):
    ...
ValueError: width must be greater than 0

>>> bg.integer_validator("width", None)
Traceback (most recent call last):
    ...
TypeError: width must be an integer

